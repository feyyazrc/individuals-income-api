# Copyright 2020 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~
include "backend.conf"
appName = individuals-income-api
appUrl = CHANGEME

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.individualsincomeapi.handlers.VersioningRequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform backend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"
play.http.filters = "uk.gov.hmrc.play.bootstrap.backend.filters.BackendFilters"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.individualsincomeapi.handlers.CustomErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "uk.gov.hmrc.individualsincomeapi.config.ConfigModule"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key = "9r3XFqx8q2IjYaoAZEM3qxL6D3zn5tUdZEaNAhxA9UCIEYByHggJbP6ucKNLGxoY"

# Session configuration
# ~~~~~
application.session.httpOnly = false

application.session.secure = false

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

json.encryption.key = "fqpLDZ4smuDsekHkrEBlCA=="

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.individualsincomeapi.controllers.DocumentationController = {
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.individualsincomeapi.controllers.MicroserviceHelloWorld = {
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.individualsincomeapi.controllers.SandboxRootController = {
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.individualsincomeapi.controllers.SandboxIncomeController = {
    needsLogging = false
    needsAuditing = false
  }
}


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}


# Microservice specific config

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {

    auth {
      host = localhost
      port = 8500
    }

    individuals-matching-api {
      host = localhost
      port = 9653
    }

    des {
      host = localhost
      port = 9625
      authorization-token = DES_BEARER_TOKEN
      environment = isit
    }
  }
}

mongodb.uri = "mongodb://127.0.0.1:27017/ogd-apis"

cache {
  enabled = true
  ttlInSeconds = 900
}

versioning {

  unversionedContexts = [
    "/api",
    "/admin",
    "/ping"
  ]

}

api-config {
    scopes {
    }

    endpoints {
        incomeSaSource {
            endpoint = "/individuals/income/sa/source"
            fields {
                A = "sa/returnList/businessDescription"
                B = "sa/returnList/addressLine1"
                C = "sa/returnList/addressLine2"
                D = "sa/returnList/addressLine3"
                E = "sa/returnList/addressLine4"
                F = "sa/returnList/postcode"
                G = "sa/returnList/telephoneNumber"
            }
          }

          incomeSa {
            endpoint = "individuals/income/sa"
            fields {
                A = "sa/returnList/caseStartDate"
                B = "sa/returnList/receivedDate"
                C = "sa/taxYear"
            }
          }

          incomeSaSummary {
            endpoint = "individuals/income/sa/summary"
            fields {
                A = "sa/returnList/income/selfAssessment"
            }
          }

          incomeEmployments {
            endpoint = "individuals/income/employments"
            fields {
                A = "sa/returnList/income/allEmployments"
            }
          }

          incomeSaInterestsAndDividends {
            endpoint = "individuals/income/sa/interests-and-dividends"
            fields {
                A = "sa/returnList/income/ukInterest"
                B = "sa/returnList/income/foreignDivs"
                C = "sa/returnList/income/ukDivsAndInterest"
            }
          }

          incomeSaPartnerships {
            endpoint = "individuals/income/sa/partnerships"
            fields {
                A = "sa/returnList/income/partnerships"
            }
          }

          incomeSaPensionsAndStateBenefits {
            endpoint = "individuals/income/sa/pensions-and-state-benefits"
            fields {
                A = "sa/returnList/income/pensions"
            }
          }

          incomeSaSelfEmployments {
            endpoint = "individuals/income/sa/self-employments"
            fields {
                A = "sa/returnList/income/selfEmployment"
            }
          }

          incomeSaTrusts {
            endpoint = "individuals/income/sa/trusts"
            fields {
                A = "sa/returnList/income/trusts"
            }
          }

          incomeSaUkProperties {
            endpoint = "individuals/income/sa/uk-properties"
            fields {
                A = "sa/returnList/income/ukProperty"
            }
          }

          incomeSaForeign {
            endpoint = "individuals/income/sa/foreign"
            fields {
                A = "sa/returnList/income/foreign"
            }
          }

          incomeSaAdditionalInformation {
            endpoint = "individuals/income/sa/additional-information"
            fields {
                A = "sa/returnList/income/lifePolicies"
                B = "sa/returnList/income/shares"
            }
          }

          incomeSaOther {
            endpoint = "individuals/income/sa/other"
            fields {
                A = "sa/returnList/income/other"
            }
          }

          incomeSaFurtherDetails {
            endpoint = "individuals/income/sa/further-details"
            fields {
                A = "sa/returnList/busStartDate"
                B = "sa/returnList/busEndDate"
                C = "sa/returnList/totalTaxPaid"
                D = "sa/returnList/totalNIC"
                E = "sa/returnList/turnover"
                F = "sa/returnList/otherBusIncome"
                G = "sa/returnList/tradingIncomeAllowance"
                H = "sa/returnList/deducts/totalBusExpenses"
                I = "sa/returnList/deducts/totalDisallowBusExp"
            }
          }

          incomePaye {
            endpoint = "individuals/income/paye"
            fields {
                A = "paye/taxCode"
                B = "paye/employee/hasPartner"
                C = "paye/payroll/id"
                D = "paye/paidHoursWorked"
                E = "paye/taxablePayToDate"
                F = "paye/totalTaxToDate"
                G = "paye/taxDeductedOrRefunded"
                H = "paye/employedPayeRef"
                I = "paye/paymentDate"
                J = "paye/taxablePay"
                K = "paye/employeeNICs/inPayPeriod1"
                L = "paye/employeeNICs/inPayPeriod"
                M = "paye/employeeNICs/inPayPeriod3"
                N = "paye/employeeNICs/inPayPeriod4"
                O = "paye/employeeNICs/ytd1"
                P = "paye/employeeNICs/ytd2"
                Q = "paye/employeeNICs/ytd3"
                R = "paye/employeeNICs/ytd4"
                S = "paye/taxYear"
                T = "paye/monthlyPeriodNumber"
                U = "paye/weeklyPeriodNumber"
                V = "paye/grossEarningsForNICs/inPayPeriod1"
                W = "paye/grossEarningsForNICs/inPayPeriod2"
                X = "paye/grossEarningsForNICs/inPayPeriod3"
                Y = "paye/grossEarningsForNICs/inPayPeriod4"
                Z = "paye/payFrequency"
                AA = "paye/statutoryPayYTD/maternity"
                AB = "paye/statutoryPayYTD/paternity"
                AC = "paye/statutoryPayYTD/adoption"
                AD = "paye/employeePensionContribs/paidYTD"
                AE = "paye/employeePensionContribs/notPaidYTD"
                AF = "paye/employeePensionContribs/paid"
                AG = "paye/employeePensionContribs/notPaid"
                AH = "paye/dednsFromNetPay"
                AI = "paye/statutoryPayYTD/parentalBereavement"
            }
          }
    }
}